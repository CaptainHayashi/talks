Verifying a Single-Producer Stack
15 Jul 2015
Tags: concurrency sppool safety icap

*Matt*Windsor*
University of York
mbw500@york.ac.uk

Mike Dodds
University of York
mike.dodds@york.ac.uk

# Hi, I'm Matt, and I'm from the High-Integrity Systems Engineering
# research group at the University of York.  I'm currently in my first
# year of a Ph.D supervised by Mike Dodds.
#
# This is the first time I've talked at a workshop, so your feedback is
# greatly appreciated.

# So, let's talk about verifying a stack.

* The stack to verify

*  
.image sppool0.png

# We're going to be looking at the SP pool, which is part of the
# time-stamped stack Mike Dodds, Andreas Haas, and Christoph Kirsch
# discussed at POPL this year.

# On the face of it, the SP pool is a linked list, whose nodes contain
# an element and a next pointer.  However, nodes can also be ‘taken’,
# which marks them as dead to the algorithm.  We have a top pointer,
# but we also need to know when the list ends.

*  
.image sppool1.png

# This is done with a special node that links back to itself, which we
# term the sentinel node.

*  
.image sppool2.png

# The SP pool is single-producer, with one thread taking the push
# operation.

* Pushing

# Pushing is fairly straightforward, and involves making a node,
# giving it the top pointer, and then assigning it to the SP pool's top.
# We're assuming assignment is atomic here.

Non-atomic node creation, atomic top swap.

.code sppool /INSERT OMIT/,/END INSERT OMIT/

Single-producer means insert can't race with itself.

*  
.image sppool3.png

# The SP pool is multi-consumer, with multiple threads being able to
# pop.  The pop occurs in two stages:

* Popping

Non-atomically find the youngest node (or report empty)…

.code sppool /GETYOUNGEST OMIT/,/END GETYOUNGEST OMIT/

…and atomically mark it as _taken_.

.code sppool /REMOVE OMIT/,/END REMOVE OMIT/

# This wraps up the stack methods of the pool.  So far this looks fairly
# simple and easy to prove, but I wouldn't be talking about it if it
# was!  So, we're not finished.

* Compression

# You might have noticed that our pool has a memory leak in it.

Pushing adds nodes, but popping doesn't remove them ⇒ _memory_leak._
Also a time leak, as we have to traverse all these ‘dead’ nodes.

.image leak.png

Solution: _atomically_ move pointers past taken nodes
— take taken nodes out of main pool (_spine_)

# If we have GC/reference-counting, this should work!

* Forwards compression

Non-atomically sweep all taken nodes below current node, then swing next pointer.

  Node next = A.next;                                          // next == A.next == B
  while (next->next != next && next.taken) next = next->next;  // next == C            (sweep)
  A.next = next;                                               // next == A.next == C  (update)

.image fcom.png

* Backwards compression

_getYoungest_ sweeps only taken nodes between top and youngest node.
If top was A, and youngest was C, infer everything between A and C must be taken:

  CAS(top, A, C);          // if top == A, (infer) and (update)
  if (A != C) A.next = C;  // this part is effectively forwards compression

# We assume reference counting and ABA counters here.

.image bcom.png

* Complexity emerges

* Global effect of compression
.image fraying0.png

Without compression, we have a trivial linked list…

* Global effect of compression
.image fraying1.png

GC ⟹ still a linked list… right?

# So, if we're doing this, then we still have a linked list, right?
# All these red branches are unused nodes that we're just pulling out of
# the spine, right?

* Traversals can end up in compressed paths
Non-atomic traversals → traversals moved out _with_taken_nodes_. Is this racy?

.image fraying2.png

* Forwards compression ∥ Forwards compression
Thread 1 pushes A, starting blue compression.  All between nodes A, B, C taken.
Sweeps to B, which is not taken.

.image race0.png

_Trace:_ *1*push(A);*1*compress-sweep(A,*B)*

* Forwards compression ∥ Forwards compression
_Context_switch_. Thread 2 pops B.
Thread 1 is still waiting to switch A's pointer.

.image race1.png

_Trace:_ 1 push(A); 1 compress-sweep(A, B); *2*pop(B)*

* Forwards compression ∥ Forwards compression
_Context_switch_. Thread 3 pops A.
Thread 3 now starts green compression, which sweeps to C.

.image race2.png

_Trace:_ 1 push(A); 1 compress-sweep(A, B); 2 pop(B); *3*pop(A);*3*compress-sweep(A,*C)*

* Forwards compression ∥ Forwards compression
_Context_switch_.
If thread 3 updates pointer first…

.image race3.png

_Trace:_ 1 push(A); 1 compress-sweep(A, B); 2 pop(B); 3 pop(A); 3 compress-sweep(A, C);
*3*compress-update(A,*C)*

* Forwards compression ∥ Forwards compression
…part of it is undone by thread 1 when it resumes.
(Also a similar backwards-compression race with insertion!)

.image race4.png

_Trace:_ 1 push(A); 1 compress-sweep(A, B); 2 pop(B); 3 pop(A); 3 compress-sweep(A, C);
3 compress-update(A, C); *1*compress-update(A,*B)*

* Can we show that these don't violate well-formedness invariants?

- All non-taken nodes being on spine, no cycles, etc.
- These races only undo some compression: unwanted, but _harmless._

In other words, can we prove _memory_safety_of_the_compressed_SP_pool?_

We want a _framework_ for reasoning about this.

I used *iCAP*

- Higher-order concurrent separation logic
- Shared state is labelled transition system (protocol)
- Transitions (atomic actions) guarded by fractional permissions → single-producer

# Next-pointer order is subset of insertion order
# Each node has one, and only one, next pointer
# Sentinel is the only node to point to itself
# Each node must have a path to the sentinel
# Only the spine can have non-taken nodes
# No node can be both taken and non-taken
# Methods adhere to _weak_ preconditions and postconditions

* A taste of iCAP

* The abstract state
Each state is a _6-tuple_ of nodes and _sets_ of nodes:

.image tuple0.png

These entirely characterise the SP pool.
Some are _ghost_variables_: they don't correspond to concrete state.

* The abstract state
.image tuple1.png
# We have the set of non-taken nodes…

* The abstract state
.image tuple2.png
# …the set of taken nodes…

* The abstract state
.image tuple3.png
# …the top and sentinel nodes, which must be in N union T…

* The abstract state
.image tuple4.png

* The abstract state
.image tuple5.png
# …and two sets of pointers as ordered set pairs, one of which is the
# literal physical next pointer set that can be closed over to make a
# partial physical order, and the other is added to every
# time a node is inserted, and can be used to make a total insertion
# order.

≤𝓟 ≜ reflexive transitive closure of 𝓟 —_physical_order_
≤𝓣 ≜ reflexive transitive closure of 𝓣 —_temporal_(insertion)_order_

* States and transitions

Each atomic action corresponds to a labelled transition.

Each must be general enough to admit the data-races while proving them _harmless_.

.image tprods.png

Let's look at an example, the transition for forwards compression.

* General forwards compression

B and C are _not_necessarily_ on same branch.  Why?  Compression data-race.

.image compress0.png

How do we capture this in iCAP?

* Atomic action for forwards compression

*Forwards*compression*of*a*from*b*to*c:*
⟨N, T, t, s, 𝓟 ⊎ {(a, b)}, 𝓣⟩ ∧ a >𝓣 c ∧ allTaken(b, c, T, 𝓟, 𝓣)
⟿ ⟨N, T, t, s, 𝓟 ⊎ {(a, c)}, 𝓣⟩
(where allTaken ensures any nodes moved in/out of spine are taken)

Can you see the pointer update?

- Can't just _frame_ on {(a, b)} ⟿ {(a, c)}
- Drawback of iCAP's abstraction mechanisms

How do we state the all-taken property properly?
How do we know that compression can't make cycles?

# Compression need not be between two points on the same branch
# …but both sides must be _taken_


* Forwards compression: use temporal order ≤𝓣

.image compress1.png

# If we apply the insertion order here, then we can simply say that

- ≤𝓣 total: allTaken property expressed over an interval
- ≤𝓟 ⊆ ≤𝓣: maintaining this implies lack of cycles
- Any deviation between the two can only concern taken nodes

# ≤𝓟 ⊆ ≤𝓣, ≤𝓣 total, and ≤𝓣 monotonic; compression preserves _illusion_ that ≤𝓟 = ≤𝓣

* What can I conclude?

* Conclusions

We _believe_ the SP pool is memory safe.

- Proof not yet fully formalised and checked
- Some known unknowns, probably unknown unknowns too
- Aim to finish and possibly publish results later this year

* Linearisability?

No conclusive result for linearisability to set or stack semantics.

- Best bet: _stack_theorem_ (Dodds/Haas/Kirsch)
- Informally, SP pool seems to preserve LIFO order
- Memory safety implies almost all of set semantics linearisable
- Emptiness check is causing problems

* How useful is iCAP?

iCAP works but could fit better.

- Abstraction is good!, but…
- …no framing, no separation
- proof needs to reason about _all_ interference all the time, so massive stability proofs
- Tree logics?
